<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on TechBlog about OpenShift/Ansible/Satellite and much more</title><link>https://blog.stderr.at/java/</link><description>Recent content in Java on TechBlog about OpenShift/Ansible/Satellite and much more</description><generator>Hugo</generator><language>en-us</language><copyright>Toni Schmidbauer &amp; Thomas Jungbauer</copyright><atom:link href="https://blog.stderr.at/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Adventures in Java Land: JPA disconnected entities</title><link>https://blog.stderr.at/java/2022-02-25-jpa-disconnected-entity/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/java/2022-02-25-jpa-disconnected-entity/</guid><description>&lt;p>
An old man tries to refresh his Java skills and does &lt;a href="https://www.redhat.com/en/services/training/red-hat-cloud-native-microservices-development-quarkus-do378">DO378&lt;/a>. He fails
spectacularly at the first real example but learns a lot on the way.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
The exception
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
There is this basic example where you build a minimal REST API for
storing speaker data in a database. Quarkus makes this quite easy. You
just have to define your database connection properties in
&lt;code>resources/application.properties&lt;/code> and off you go developing your Java
Quarkus REST service:&lt;/p></description></item></channel></rss>