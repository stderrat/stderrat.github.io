<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Service Mesh on TechBlog about OpenShift/Ansible/Satellite and much more</title><link>https://blog.stderr.at/tags/service-mesh/</link><description>Recent content in Service Mesh on TechBlog about OpenShift/Ansible/Satellite and much more</description><generator>Hugo</generator><language>en-us</language><copyright>Toni Schmidbauer &amp; Thomas Jungbauer</copyright><lastBuildDate>Sun, 05 May 2024 18:05:24 +0200</lastBuildDate><atom:link href="https://blog.stderr.at/tags/service-mesh/index.xml" rel="self" type="application/rss+xml"/><item><title>Service Mesh</title><link>https://blog.stderr.at/service-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/</guid><description/></item><item><title>Enable Automatic Route Creation</title><link>https://blog.stderr.at/service-mesh/2020/05/enable-automatic-route-creation/</link><pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/05/enable-automatic-route-creation/</guid><description>&lt;div class="paragraph">
&lt;p>Red Hat Service Mesh 1.1 allows you to enable a &amp;#34;&lt;strong>Automatic Route Creation&lt;/strong>&amp;#34; which will take care about the routes for a specific Gateway. Instead of defining * for hosts, a list of domains can be defined. The Istio OpenShift Routing (ior) synchronizes the routes and creates them inside the Istio namespace. If a Gateway is deleted, the routes will also be removed again.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This new features makes the manual creation of the route obsolete, as it was explained here: &lt;a href="https://blog.stderr.at/service-mesh/2020/03/ingress-with-custom-domain/">Openshift 4 and Service Mesh 4 - Ingress with custom domain&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>Authorization (RBAC)</title><link>https://blog.stderr.at/service-mesh/2020/05/authorization-rbac/</link><pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/05/authorization-rbac/</guid><description>&lt;div class="paragraph">
&lt;p>Per default all requests inside a Service Mesh are allowed, which can be a problem security-wise.
To solve this, authorization, which verifies if the user is allowed to perform a certain action, is required.
Istio’s authorization provides access control on mesh-level, namespace-level and workload-level.&lt;/p>
&lt;/div></description></item><item><title>Deploy Example Bookinfo Application</title><link>https://blog.stderr.at/service-mesh/2020/04/deploy-example-bookinfo-application/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/deploy-example-bookinfo-application/</guid><description>&lt;div class="paragraph">
&lt;p>To test a second application, a bookinfo application shall be deployed as an example.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>The following section finds it’s origin at:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://istio.io/docs/examples/bookinfo/" target="_blank" rel="noopener">Istio - Bookinfo Application&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.openshift.com/container-platform/4.3/service_mesh/service_mesh_day_two/ossm-example-bookinfo.html" target="_blank" rel="noopener">OpenShift 4 - Example Application&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Service Mesh 1.1 released</title><link>https://blog.stderr.at/service-mesh/2020/04/service-mesh-1.1-released/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/service-mesh-1.1-released/</guid><description>&lt;div class="paragraph">
&lt;p>April 10th 2020 Red Hat released Service Mesh version 1.1 which supports the following versions:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>Istio - 1.4.6&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kiali - 1.12.7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Jaeger - 1.17.1&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Authentication JWT</title><link>https://blog.stderr.at/service-mesh/2020/04/authentication-jwt/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/authentication-jwt/</guid><description>&lt;div class="paragraph">
&lt;p>Welcome to tutorial 10 of &lt;strong>OpenShift 4 and Service Mesh&lt;/strong>, where we will discuss authentication with JWT.
JSON Web Token (JWT) is an open standard that allows to transmit information between two parties securely as a JSON object. It is an authentication token, which is verified and signed and therefore trusted. The signing can be achieved by using a secret or a public/private key pair.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Service Mesh can be used to configure a policy which enables JWT for your services.&lt;/p>
&lt;/div></description></item><item><title>Mutual TLS Authentication</title><link>https://blog.stderr.at/service-mesh/2020/04/mutual-tls-authentication/</link><pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/mutual-tls-authentication/</guid><description>&lt;div class="paragraph">
&lt;p>When more and more microservices are involved in an application, more and more traffic is sent on the network. It should be considered to secure this traffic, to prevent the possibility to inject malicious packets. Mutual TLS/mTLS authentication or two-way authentication offers a way to encrypt service traffic with certificates.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>With Red Hat OpenShift Service Mesh, Mutual TLS can be used without the microservice knowing that it is happening. The TLS is managed completely by the Service Mesh Operator between two Envoy proxies using a defined mTLS policy.&lt;/p>
&lt;/div></description></item><item><title>Fault Injection</title><link>https://blog.stderr.at/service-mesh/2020/04/fault-injection/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/fault-injection/</guid><description>&lt;div class="paragraph">
&lt;p>Tutorial 8 of &lt;strong>OpenShift 4 and Service Mesh&lt;/strong> tries to cover Fault Injection by using Chaos testing method to verify if your application is running. This is done by adding the property HTTPFaultInjection to the VirtualService. The settings for this property can be for example: delay, to delay the access or abort, to completely abort the connection.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>&amp;#34;&lt;em>Adopting microservices often means more dependencies, and more services you might not control. It also means more requests on the network, increasing the possibility for errors. For these reasons, it’s important to test your services’ behavior when upstream dependencies fail.&amp;#34;&lt;/em> [&lt;a href="#source_1">1&lt;/a>]&lt;/p>
&lt;/div></description></item><item><title>Limit Egress/External Traffic</title><link>https://blog.stderr.at/service-mesh/2020/04/limit-egress/external-traffic/</link><pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/limit-egress/external-traffic/</guid><description>&lt;div class="paragraph">
&lt;p>Sometimes services are only available from outside the OpenShift cluster (like external API) which must be reached. Part 7 of &lt;strong>OpenShift 4 and Service Mesh&lt;/strong> takes care and explains how to control the egress or external traffic. All operations have been successdully tested on OpenShift 4.3.&lt;/p>
&lt;/div></description></item><item><title>Advanced Routing Example</title><link>https://blog.stderr.at/service-mesh/2020/04/advanced-routing-example/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/advanced-routing-example/</guid><description>&lt;div class="paragraph">
&lt;p>Welcome to part 6 of &lt;strong>OpenShift 4 and Service Mesh&lt;/strong> Advanced routing, like Canary Deployments, traffic mirroring and loadbalancing are discussed and tested. All operations have been successdully tested on OpenShift 4.3.&lt;/p>
&lt;/div></description></item><item><title>Routing Example</title><link>https://blog.stderr.at/service-mesh/2020/04/routing-example/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/04/routing-example/</guid><description>&lt;div class="paragraph">
&lt;p>In part 5 of the &lt;strong>OpenShift 4 and Service Mesh&lt;/strong> tutorials, basic routing, using the objects VirtualService and DesitnationRule, are described. All operations have been successfully tested on OpenShift 4.3.&lt;/p>
&lt;/div></description></item><item><title>Ingress with custom domain</title><link>https://blog.stderr.at/service-mesh/2020/03/ingress-with-custom-domain/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/03/ingress-with-custom-domain/</guid><description>&lt;div class="admonitionblock warning">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-warning" title="Warning">&lt;/i>
&lt;/td>
&lt;td class="content">
Since Service Mesh 1.1, there is a better way to achieve the following. Especially the manual creation of the route is not required anymore. Check the following article to &lt;a href="https://blog.stderr.at/service-mesh/2020/05/enable-automatic-route-creation">Enable Automatic Route Creation&lt;/a>.
&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Often the question is how to get traffic into the Service Mesh when using a custom domains. Part 4 our our tutorials series &lt;strong>OpenShift 4 and Service Mesh&lt;/strong> will use a dummy domain &lt;strong>&amp;#34;hello-world.com&amp;#34;&lt;/strong> and explains the required settings which must be done.&lt;/p>
&lt;/div></description></item><item><title>Ingress Traffic</title><link>https://blog.stderr.at/service-mesh/2020/03/ingress-traffic/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/03/ingress-traffic/</guid><description>&lt;div class="paragraph">
&lt;p>Part 3 of tutorial series &lt;strong>OpenShift 4 and Service Mesh&lt;/strong> will show you how to create a Gateway and a VirtualService, so external traffic actually reaches your Mesh. It also provides an example script to run some curl in a loop.&lt;/p>
&lt;/div></description></item><item><title>Deploy Microservices</title><link>https://blog.stderr.at/service-mesh/2020/03/deploy-microservices/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/03/deploy-microservices/</guid><description>&lt;div class="paragraph">
&lt;p>The second tutorials explains how to install an example application containing thee microservices. All operations have been successfully tested on OpenShift 4.3.&lt;/p>
&lt;/div></description></item><item><title>Installation</title><link>https://blog.stderr.at/service-mesh/2020/03/installation/</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/service-mesh/2020/03/installation/</guid><description>&lt;div class="paragraph">
&lt;p>Everything has a start, this blog as well as the following tutorials. This series of tutorials shall provide a brief and working overview about &lt;strong>OpenShift Service Mesh&lt;/strong>. It is starting with the installation and the first steps, and will continue with advanced settings and configuration options.&lt;/p>
&lt;/div></description></item><item><title>YAUB Yet Another Useless Blog</title><link>https://blog.stderr.at/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/</guid><description>Welcome to YAUB - Yet Another Useless Blog The articles in this blog shall help to easily test and understand specific issues so they can be reproduced and tested on local environments.
You can find the most recent posts on this site or walk through the different categories via the left navigation.</description></item></channel></rss>