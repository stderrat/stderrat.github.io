<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles by Toni Schmidbauer on TechBlog about OpenShift/Ansible/Satellite and much more</title><link>https://blog.stderr.at/authors/toni-schmidbauer/</link><description>Recent content in Articles by Toni Schmidbauer on TechBlog about OpenShift/Ansible/Satellite and much more</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Toni Schmidbauer &amp; Thomas Jungbauer</copyright><atom:link href="https://blog.stderr.at/authors/toni-schmidbauer/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Falco on OpenShift 4.12</title><link>https://blog.stderr.at/openshift/2023-11-26-running-falco/</link><pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/openshift/2023-11-26-running-falco/</guid><description>&lt;p>
As mentioned in our &lt;a href="https://blog.stderr.at/openshift/2023-10-23-openshift-falco/">previous post&lt;/a> about &lt;a href="https://falco.org/">Falco&lt;/a>, Falco is a security
tool to monitor kernel events like system calls or Kubernetes audit
logs to provide real-time alerts.&lt;/p>
&lt;p>
In this post I&amp;#39;ll show to customize Falco for a specific use case.
We would like to monitor the following events:&lt;/p>
&lt;ul>
&lt;li>An interactive shell is opened in a container&lt;/li>
&lt;li>Log all commands executed in an interactive shell in a container&lt;/li>
&lt;li>Log read and writes to files within an interactive shell inside a container&lt;/li>
&lt;li>Log commands execute via `kubectl/oc exec` which leverage the
&lt;code>pod/exec&lt;/code> K8s endpoint&lt;/li>
&lt;/ul></description></item><item><title>Setting up Falco on OpenShift 4.12</title><link>https://blog.stderr.at/openshift/2023-10-23-openshift-falco/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/openshift/2023-10-23-openshift-falco/</guid><description>&lt;p>
&lt;a href="https://falco.org/">Falco&lt;/a> is a security tool to monitor kernel events like system calls to
provide real-time alerts. In this post I&amp;#39;ll document the steps taken
to get Open Source &lt;a href="https://falco.org/">Falco&lt;/a> running on an OpenShift 4.12 cluster.&lt;/p>
&lt;p>
&lt;a href="https://blog.stderr.at/openshift/2023-10-23-openshift-falco/#headline-4">UPDATE&lt;/a>: Use the &lt;code>falco-driver-loader-legacy&lt;/code> image for OpenShift 4.12 deployments.&lt;/p></description></item><item><title>How to force a MachineConfig rollout</title><link>https://blog.stderr.at/openshift/2023-10-18-force-machineconfig-rollout/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/openshift/2023-10-18-force-machineconfig-rollout/</guid><description>&lt;p>
While playing around with &lt;a href="https://falco.org/">Falco&lt;/a> (worth another post) I had to force a
MachineConfig update even so the actual configuration of the machine
did not change.&lt;/p>
&lt;p>
This posts documents the steps taken.&lt;/p></description></item><item><title>Overview of Red Hat's Multi Cloud Gateway (Noobaa)</title><link>https://blog.stderr.at/openshift/2022-04-22-multi-cloud-gateway/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/openshift/2022-04-22-multi-cloud-gateway/</guid><description>This is my personal summary of experimenting with Red Hat&amp;#39;s Multi Cloud Gateway (MCG) based on the upstream Noobaa project. MCG is part of Red Hat&amp;#39;s OpenShift Data Foundation (ODF). ODF bundles the upstream projects Ceph and Noobaa.
Overview Noobaa, or the Multicloud Gateway (MCG), is a S3 based data federation tool. It allows you to use S3 backends from various sources and
sync replicate or simply use existing S3 buckets.</description></item><item><title>Adventures in Java Land: JPA disconnected entities</title><link>https://blog.stderr.at/java/2022-02-25-jpa-disconnected-entity/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/java/2022-02-25-jpa-disconnected-entity/</guid><description>An old man tries to refresh his Java skills and does DO378. He fails spectacularly at the first real example but learns a lot on the way.
The exception There is this basic example where you build a minimal REST API for storing speaker data in a database. Quarkus makes this quite easy. You just have to define your database connection properties in resources/application.properties and off you go developing your Java Quarkus REST service:</description></item><item><title>Stumbling into Azure Part II: Setting up a private ARO cluster</title><link>https://blog.stderr.at/azure/2021-10-29-private-aro/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/azure/2021-10-29-private-aro/</guid><description>In Part I of our blog post we covered setting up required resources in Azure. Now we are finally going to set up a private cluster. Private
As review from Part I here is our planned setup, this time including the ARO cluster.
Azure Setup The diagram below depicts our planned setup:
On the right hand side can see the resources required for our lab:
a virtual network (vnet 192.</description></item><item><title>Stumbling into Azure Part I: Building a site-to-site VPN tunnel for testing</title><link>https://blog.stderr.at/azure/2021-10-17-s2s-vpn/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/azure/2021-10-17-s2s-vpn/</guid><description>So we want to play with ARO (Azure Red Hat OpenShift) private clusters. A private cluster is not reachable from the internet (surprise) and is only reachable via a VPN tunnel from other networks.
This blog post describes how we created a site-to-site VPN between a Hetzner dedicated server running multiple VM&amp;#39;s via libvirt and Azure.
An upcoming blog post is going to cover the setup of the private ARO cluster.</description></item><item><title>Stumbling into Quay: Upgrading from 3.3 to 3.4 with the quay-operator</title><link>https://blog.stderr.at/quay/2021-09-07-quay-upgrade-3.4/</link><pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/quay/2021-09-07-quay-upgrade-3.4/</guid><description>We had the task of answering various questions related to upgrading Red Hat Quay 3.3 to 3.4 and to 3.5 with the help of the quay-operator.
Thankfully (sic!) everything changed in regards to the Quay operator between Quay 3.3 and Quay 3.4.
So this is a brain dump of the things to consider.
Operator changes With Quay 3.4 the operator was completely reworked and it basically changed from opinionated to very opinionated.</description></item><item><title>Ansible Tower and downloading collections</title><link>https://blog.stderr.at/ansible/2021/07/ansible-tower-and-downloading-collections/</link><pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/ansible/2021/07/ansible-tower-and-downloading-collections/</guid><description>&lt;div class="paragraph">
&lt;p>Every wondered why Ansible Tower does not start downloading required
collections when you synchronize a project? Here are the stumbling
blocks we discovered so far:&lt;/p>
&lt;/div></description></item><item><title>Understanding RWO block device handling in OpenShift</title><link>https://blog.stderr.at/openshift/2021-02-27-understanding-block-devices/</link><pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/openshift/2021-02-27-understanding-block-devices/</guid><description>&lt;div class="paragraph">
&lt;p>In this blog post we would like to explore OpenShift / Kubernetes
block device handling. We try to answer the following questions:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>What happens if multiple pods try to access the same block device?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What happens if we scale a deployment using block devices to more than one replica?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Basic usage of git</title><link>https://blog.stderr.at/general/2020/05/basic-usage-of-git/</link><pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/general/2020/05/basic-usage-of-git/</guid><description>&lt;div class="paragraph">
&lt;p>This is a very short and hopefully simple introduction on how to use
&lt;a href="https://git-scm.com/">Git&lt;/a> when you would like to contribute to
projects hosted on &lt;a href="http://github.com">github.com&lt;/a>. The same workflow should also work for
projects on &lt;a href="http://gitlab.com">gitlab.com&lt;/a>.&lt;/p>
&lt;/div></description></item><item><title>Red Hat Satellite Cheat Sheet</title><link>https://blog.stderr.at/general/2020/04/red-hat-satellite-cheat-sheet/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/general/2020/04/red-hat-satellite-cheat-sheet/</guid><description>&lt;div class="paragraph">
&lt;p>Cheat sheet for various Red Hat Satellite tasks from a newbie to a newbie.&lt;/p>
&lt;/div></description></item><item><title>Helpful oc / kubectl commands</title><link>https://blog.stderr.at/openshift/2020-04-01-oc-commands/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/openshift/2020-04-01-oc-commands/</guid><description>&lt;div class="paragraph">
&lt;p>This is a list of useful oc and/or kubectl commands so they won’t be forgotton. No this is not a joke…​&lt;/p>
&lt;/div></description></item></channel></rss>