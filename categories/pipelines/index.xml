<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipelines on TechBlog about OpenShift/Ansible/Satellite and much more</title><link>https://blog.stderr.at/categories/pipelines/</link><description>Recent content in Pipelines on TechBlog about OpenShift/Ansible/Satellite and much more</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Toni Schmidbauer &amp; Thomas Jungbauer</copyright><lastBuildDate>Wed, 28 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.stderr.at/categories/pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to a Secure Supply Chain</title><link>https://blog.stderr.at/securesupplychain/2023-06-15-securesupplychain-intro/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-15-securesupplychain-intro/</guid><description>&lt;div class="paragraph">
&lt;p>The goal of the following (&amp;#34;short&amp;#34;) series is to build a secure CI/CD pipeline step by step using OpenShift Pipelines (based on Tekton).
The whole build process shall pull and build an image, upload it to a development environment and subsequently update the production environment.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>The main focus here is security. Several steps and tools shall help to build and deploy a &lt;strong>Secure Supply Chain&lt;/strong>.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>The whole process is part of a Red Hat workshop which can present to your organization. I did some tweaks and created a step-by-step plan in order
to remember it …​ since I am getting old :)&lt;/p>
&lt;/div></description></item><item><title>Step 1 - Listen to Events</title><link>https://blog.stderr.at/securesupplychain/2023-06-16-securesupplychain-step1/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-16-securesupplychain-step1/</guid><description>&lt;div class="paragraph">
&lt;p>In this first step, we will simply prepare our environment to be able to retrieve calls from Git. In Git we will fork a prepared source code into a repository and any time a developer pushes a new code into our repository a webhook will notify OpenShift Pipelines to start the pipeline. Like most pipelines, the first task to be executed is to fetch the source code so it can be used for the next steps.
The application I am going to use is called &lt;a href="https://github.com/tjungbauer/globex-ui" target="_blank" rel="noopener">globex-ui&lt;/a> and is an example webUI build with Angular.&lt;/p>
&lt;/div></description></item><item><title>Step 2 - Pipelines</title><link>https://blog.stderr.at/securesupplychain/2023-06-17-securesupplychain-step2/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-17-securesupplychain-step2/</guid><description>&lt;div class="paragraph">
&lt;p>We will now create the Pipeline and try to trigger it for the first time to verify if our Webhook works as intended.&lt;/p>
&lt;/div></description></item><item><title>Step 3 - SonarQube</title><link>https://blog.stderr.at/securesupplychain/2023-06-18-securesupplychain-step3/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-18-securesupplychain-step3/</guid><description>&lt;div class="paragraph">
&lt;p>After the Pipeline has been created and tested we will add another Task to verify the source code and check for possible security issues, leveraging the tool &lt;a href="https://www.sonarsource.com/products/sonarqube/" target="_blank" rel="noopener">SonarQube&lt;/a> by Sonar.&lt;/p>
&lt;/div></description></item><item><title>Step 4 - Verify Git Commit</title><link>https://blog.stderr.at/securesupplychain/2023-06-19-securesupplychain-step4/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-19-securesupplychain-step4/</guid><description>&lt;div class="paragraph">
&lt;p>Besides checking the source code quality, we should also verify if the commit into Git was done by someone/something we trust. It is a good practice to sign all commits to Git. You need to prepare your Git account and create trusted certificates.&lt;/p>
&lt;/div></description></item><item><title>Step 5 - Build and Sign Image</title><link>https://blog.stderr.at/securesupplychain/2023-06-20-securesupplychain-step5/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-20-securesupplychain-step5/</guid><description>&lt;div class="paragraph">
&lt;p>Finally, after pulling and checking the code, we are going to create the image. During this process the image will be signed and uploaded to the public registry &lt;a href="https://quay.io" target="_blank" rel="noopener">Quay.io&lt;/a>.&lt;/p>
&lt;/div></description></item><item><title>Step 6 - Scanning with ACS</title><link>https://blog.stderr.at/securesupplychain/2023-06-21-securesupplychain-step6/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-21-securesupplychain-step6/</guid><description>&lt;div class="paragraph">
&lt;p>In this step we will install &lt;strong>Advanced Cluster Security&lt;/strong> (ACS) and create 2 new steps in our Pipeline to scan the image for vulnerabilities and security policy. A custom security policy, configured in ACS, will verify if the image is signed.&lt;/p>
&lt;/div></description></item><item><title>Step 7 - Generating a SBOM</title><link>https://blog.stderr.at/securesupplychain/2023-06-22-securesupplychain-step7/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-22-securesupplychain-step7/</guid><description>&lt;div class="paragraph">
&lt;p>A &lt;strong>software bill of materials&lt;/strong> (SBOM) offers an insight into the makeup of an application developed using third-party commercial tools and open-source software. It is a machine-readable, formally structured list of all components. This list is important to gain visibility into what risks might exist in a package and their potential impact. It allows to prioritize the risks and define a remediation path.
The teams can use the SBOM to monitor all components that are used across an application.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>We will create a Task that will generate a SBOM and uploads it into an SBOM repository.&lt;/p>
&lt;/div></description></item><item><title>Step 8 - Updating Kubernetes Manifests</title><link>https://blog.stderr.at/securesupplychain/2023-06-23-securesupplychain-step8/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-23-securesupplychain-step8/</guid><description>&lt;div class="paragraph">
&lt;p>With the finalization of the build process and the security checks during this phase, it is now time to update the Kubernetes manifests and provide the new tag for the created image.
I have forked (and cleaned up) another repository that will store all yaml specifications that are required for OpenShift. You can find this repository at: &lt;a href="https://github.com/tjungbauer/securing-software-supply-chain/tree/main/application/globex" target="_blank" rel="noopener">Kubernetes Manifests&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>Step 9 - Linting Kubernetes Manifests</title><link>https://blog.stderr.at/securesupplychain/2023-06-24-securesupplychain-step9/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-24-securesupplychain-step9/</guid><description>&lt;div class="paragraph">
&lt;p>At this point we have checked our source code, verified that it has been signed and has no vulnerabilities, generated a SBOM and updated the Kubernetes manifests, that are responsible to deploy our application on OpenShift. As everything with OpenShift these Kubernetes objects are simple yaml files. In this step we will perform a linting on these files, to verify if they follow certain rules and best practices.&lt;/p>
&lt;/div></description></item><item><title>Step 10 - The Example Application</title><link>https://blog.stderr.at/securesupplychain/2023-06-25-securesupplychain-step10/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-25-securesupplychain-step10/</guid><description>&lt;div class="paragraph">
&lt;p>If you read all articles up to here (congratulations) you know that we always update the README file of &amp;#34;The Application&amp;#34;. But what is this application exactly and how can we update it like in a real-life example? The &lt;strong>Globex UI&lt;/strong> application is built with Angular and was prepared for this journey. It is a quite complex application and requires Kafka to be installed as well. However, since I am not a developer and this tool was already available, I forked and re-used it. The original can be found at &lt;a href="https://github.com/redhat-gpte-devopsautomation/globex-ui" target="_blank" rel="noopener">Globex UI&lt;/a>&lt;/p>
&lt;/div></description></item><item><title>Step 11 - ACS Deployment Check</title><link>https://blog.stderr.at/securesupplychain/2023-06-26-securesupplychain-step11/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-26-securesupplychain-step11/</guid><description>&lt;div class="paragraph">
&lt;p>After the Pipeline prepared the new image for DEV it should be checked against ACS for policy compliance. This ensures that the deployment manifest adheres to policy requirements. The command line tool &lt;strong>roxctl&lt;/strong> will be leveraged to perform this task.&lt;/p>
&lt;/div></description></item><item><title>Step 12 - Verify TLog Signature</title><link>https://blog.stderr.at/securesupplychain/2023-06-27-securesupplychain-step12/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-27-securesupplychain-step12/</guid><description>&lt;div class="paragraph">
&lt;p>Since the image has been deployed on DEV now, we need to prepare everything for production. Before we start, we need to confirm that the whole signing process has been passed and that our signature has been applied correctly. With CoSign we signed our image and used Rekor to create a transparency log. We will use this log to confirm that the image was signed.&lt;/p>
&lt;/div></description></item><item><title>Step 13 - Bring it to Production</title><link>https://blog.stderr.at/securesupplychain/2023-06-28-securesupplychain-step13/</link><pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.stderr.at/securesupplychain/2023-06-28-securesupplychain-step13/</guid><description>&lt;div class="paragraph">
&lt;p>If you reached this article, congratulations! You read through tons of pages to build up a Pipeline. The last two steps in our Pipeline are: Creating a new branch and creating a pull request, with the changes of the image tag that must be approved and will be merged then (We will not update the main branch directly!). Finally, we will do a &amp;#34;real&amp;#34; update to the application to see the actual changes.&lt;/p>
&lt;/div></description></item></channel></rss>